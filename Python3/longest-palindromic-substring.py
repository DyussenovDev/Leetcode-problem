# Подход 1: Проверка всех подстрок 
# Мы просто проверим, является ли каждая подстрока палиндромом, и выберем из нее самую длиную
# Мы можем сделать это с помощью двух указателей.
# Если строка является палиндромом, то первый символ будет равен последнему, второй будет равен предпоследнему и т.д.
# Алгоритм:
#   1. Создадим метод check(i, j) для определения явлвяется ли строка палиндромом. 
#       - Для проверки мы не будем передавать целую строку, а передадим два индекса 
#       Первый символ будет s[i], второй - s[j - 1]
#       - Создадим два указателя left = i, right = j - 1
#       - Пока left < right будем выполнять:
#           - s[left] != s[right], то false
#           - для продвижения left += 1, right -= 1
#           - Если пройдем цикл, то true
#
#   2. Используем цикл for для рассмотрения длины подстроки в данный момент. 
#      Его задача — перебирать длины подстрок от самой большой (длина всей строки) до самой маленькой (1 символ).
#       
#   3. Внутренний цикл перебирает все возможные начальные позиции start для подстроки длины 
#   s.length - length. Эта переменная представляет начальную точку подстроки, которую мы в данный момент рассматриваем.
#   
#   4. В каждой итерации внутреннего цикла мы рассматриваем подстроку, начинающуюся с start и заканчивающуюся на start + length. 
#   Мы передаём эти значения в функцию check, чтобы проверить, является ли эта подстрока палиндромом. Если это так, мы возвращаем эту подстроку.



import typing

class Solution:
    def longestPalindrome(self, s: str) -> str:
        def check(i, j):
            left = i
            right = j -1

            while left < right:
                if s[left] != s[right]:
                    return False
                
                left += 1
                right -= 1

            return True
        
        for lentgh in range(len(s), 0, -1):
            for start in range(len(s) - lentgh + 1):
                if check(start, start + lentgh):
                    return s[start : start + lentgh]
                
        return ""
    
sol = Solution()

print(sol.longestPalindrome("babad"))